/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PhotoService } from "../photo.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PhotoCreateInput } from "./PhotoCreateInput";
import { Photo } from "./Photo";
import { PhotoFindManyArgs } from "./PhotoFindManyArgs";
import { PhotoWhereUniqueInput } from "./PhotoWhereUniqueInput";
import { PhotoUpdateInput } from "./PhotoUpdateInput";
import { UploadPhotoInputDto } from "../UploadPhotoInputDto";
import { IdentifyUserOutputDto } from "../IdentifyUserOutputDto";
import { UploadPhotoOutputDto } from "../UploadPhotoOutputDto";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PhotoControllerBase {
  constructor(
    protected readonly service: PhotoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Photo })
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPhoto(@common.Body() data: PhotoCreateInput): Promise<Photo> {
    return await this.service.createPhoto({
      data: {
        ...data,

        event: data.event
          ? {
              connect: data.event,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Photo] })
  @ApiNestedQuery(PhotoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async photos(@common.Req() request: Request): Promise<Photo[]> {
    const args = plainToClass(PhotoFindManyArgs, request.query);
    return this.service.photos({
      ...args,
      select: {
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Photo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async photo(
    @common.Param() params: PhotoWhereUniqueInput
  ): Promise<Photo | null> {
    const result = await this.service.photo({
      where: params,
      select: {
        createdAt: true,

        event: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Photo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePhoto(
    @common.Param() params: PhotoWhereUniqueInput,
    @common.Body() data: PhotoUpdateInput
  ): Promise<Photo | null> {
    try {
      return await this.service.updatePhoto({
        where: params,
        data: {
          ...data,

          event: data.event
            ? {
                connect: data.event,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          event: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
          url: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Photo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePhoto(
    @common.Param() params: PhotoWhereUniqueInput
  ): Promise<Photo | null> {
    try {
      return await this.service.deletePhoto({
        where: params,
        select: {
          createdAt: true,

          event: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
          url: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/photos/identify-user")
  @swagger.ApiOkResponse({
    type: IdentifyUserOutputDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async IdentifyUserFromPhoto(
    @common.Body()
    body: UploadPhotoInputDto
  ): Promise<IdentifyUserOutputDto[]> {
    return this.service.IdentifyUserFromPhoto(body);
  }

  @common.Get("/:id/identify-user-in-photo")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async IdentifyUserInPhoto(
    @common.Body()
    body: UploadPhotoInputDto
  ): Promise<string> {
    return this.service.IdentifyUserInPhoto(body);
  }

  @common.Get("/:id/upload-event-photo")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UploadEventPhoto(
    @common.Body()
    body: UploadPhotoInputDto
  ): Promise<string> {
    return this.service.UploadEventPhoto(body);
  }

  @common.Get("/:id/upload-event-picture")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UploadEventPicture(
    @common.Body()
    body: UploadPhotoInputDto
  ): Promise<string> {
    return this.service.UploadEventPicture(body);
  }

  @common.Get("/:id/upload-photo")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UploadPhoto(
    @common.Body()
    body: UploadPhotoInputDto
  ): Promise<string> {
    return this.service.UploadPhoto(body);
  }

  @common.Post("/photos/upload-picture-for-event")
  @swagger.ApiOkResponse({
    type: UploadPhotoOutputDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UploadPictureForEvent(
    @common.Body()
    body: UploadPhotoInputDto
  ): Promise<UploadPhotoOutputDto> {
    return this.service.UploadPictureForEvent(body);
  }
}
