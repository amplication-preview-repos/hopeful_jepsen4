/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Photo } from "./Photo";
import { PhotoCountArgs } from "./PhotoCountArgs";
import { PhotoFindManyArgs } from "./PhotoFindManyArgs";
import { PhotoFindUniqueArgs } from "./PhotoFindUniqueArgs";
import { CreatePhotoArgs } from "./CreatePhotoArgs";
import { UpdatePhotoArgs } from "./UpdatePhotoArgs";
import { DeletePhotoArgs } from "./DeletePhotoArgs";
import { Event } from "../../event/base/Event";
import { User } from "../../user/base/User";
import { IdentifyPhotoInputDto } from "../IdentifyPhotoInputDto";
import { IdentifyUserOutputDto } from "../IdentifyUserOutputDto";
import { UploadPhotoInputDto } from "../UploadPhotoInputDto";
import { UploadPhotoOutputDto } from "../UploadPhotoOutputDto";
import { PhotoService } from "../photo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Photo)
export class PhotoResolverBase {
  constructor(
    protected readonly service: PhotoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "read",
    possession: "any",
  })
  async _photosMeta(
    @graphql.Args() args: PhotoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Photo])
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "read",
    possession: "any",
  })
  async photos(@graphql.Args() args: PhotoFindManyArgs): Promise<Photo[]> {
    return this.service.photos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Photo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "read",
    possession: "own",
  })
  async photo(
    @graphql.Args() args: PhotoFindUniqueArgs
  ): Promise<Photo | null> {
    const result = await this.service.photo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Photo)
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "create",
    possession: "any",
  })
  async createPhoto(@graphql.Args() args: CreatePhotoArgs): Promise<Photo> {
    return await this.service.createPhoto({
      ...args,
      data: {
        ...args.data,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Photo)
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "update",
    possession: "any",
  })
  async updatePhoto(
    @graphql.Args() args: UpdatePhotoArgs
  ): Promise<Photo | null> {
    try {
      return await this.service.updatePhoto({
        ...args,
        data: {
          ...args.data,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Photo)
  @nestAccessControl.UseRoles({
    resource: "Photo",
    action: "delete",
    possession: "any",
  })
  async deletePhoto(
    @graphql.Args() args: DeletePhotoArgs
  ): Promise<Photo | null> {
    try {
      return await this.service.deletePhoto(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async getEvent(@graphql.Parent() parent: Photo): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Photo): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => [IdentifyUserOutputDto])
  async IdentifyUserFromPhoto(
    @graphql.Args()
    args: IdentifyPhotoInputDto
  ): Promise<IdentifyUserOutputDto[]> {
    return this.service.IdentifyUserFromPhoto(args);
  }

  @graphql.Query(() => String)
  async IdentifyUserInPhoto(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.IdentifyUserInPhoto(args);
  }

  @graphql.Query(() => String)
  async UploadEventPhoto(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UploadEventPhoto(args);
  }

  @graphql.Query(() => String)
  async UploadEventPicture(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UploadEventPicture(args);
  }

  @graphql.Query(() => String)
  async UploadPhoto(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UploadPhoto(args);
  }

  @graphql.Mutation(() => UploadPhotoOutputDto)
  async UploadPictureForEvent(
    @graphql.Args()
    args: UploadPhotoInputDto
  ): Promise<UploadPhotoOutputDto> {
    return this.service.UploadPictureForEvent(args);
  }
}
